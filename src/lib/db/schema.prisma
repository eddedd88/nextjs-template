// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // uses connection pooling
  directUrl = env("DATABASE_DIRECT_URL") // used for migrations
}

model User {
  id            String     @id @default(cuid())
  name          String? // better-auth schema specifies String, current is String? - keeping optional as per original
  email         String     @unique
  emailVerified Boolean    @default(false) // Changed from DateTime? to Boolean, default false
  image         String?
  accounts      Account[]
  sessions      Session[]
  feedback      Feedback[] // Assuming this is a custom model to keep

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                   String    @id @default(cuid()) // Added PK
  userId               String
  providerId           String    // Renamed from provider
  accountId            String    // Renamed from providerAccountId
  accessToken          String?   // Renamed from access_token
  refreshToken         String?   // Renamed from refresh_token
  accessTokenExpiresAt DateTime? // Changed from expires_at (Int?)
  refreshTokenExpiresAt DateTime? // Added
  scope                String?
  idToken              String?   // Renamed from id_token
  password             String?   // Added

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId]) // Changed from @@id
}

model Session {
  id          String   @id @default(cuid()) // Added PK
  userId      String
  token       String   @unique // Renamed from sessionToken
  expiresAt   DateTime // Renamed from expires
  ipAddress   String?  // Added
  userAgent   String?  // Added

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification { // Renamed from VerificationToken
  id          String   @id @default(cuid()) // Added PK
  identifier  String
  value       String   @unique // Renamed from token
  expiresAt   DateTime // Renamed from expires

  createdAt DateTime @default(now()) // Added
  updatedAt DateTime @updatedAt // Added

  @@unique([identifier, value]) // Changed from @@id and field name
}

model Waitlist { // Assuming this is a custom model to keep
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feedback { // Assuming this is a custom model to keep
  id        String   @id @default(cuid())
  userId    String?
  email     String?
  message   String
  createdAt DateTime @default(now())
  createdBy User?    @relation(fields: [userId], references: [id])
}
